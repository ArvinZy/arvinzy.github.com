<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lucas 博客</title>
  
  <subtitle>逗逼入坑记</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.netbiu.com/"/>
  <updated>2017-11-29T17:59:56.916Z</updated>
  <id>http://blog.netbiu.com/</id>
  
  <author>
    <name>Lucas Zhang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>找不到libjpeg.8.dylib解决方法</title>
    <link href="http://blog.netbiu.com/20171130/dyld-not-loaded-libjpeg-8-dylib/"/>
    <id>http://blog.netbiu.com/20171130/dyld-not-loaded-libjpeg-8-dylib/</id>
    <published>2017-11-29T17:48:34.000Z</published>
    <updated>2017-11-29T17:59:56.916Z</updated>
    
    <content type="html"><![CDATA[<h3 id="错误提示："><a href="#错误提示：" class="headerlink" title="错误提示："></a>错误提示：</h3><p>运行php指令及其有依赖的指令，例如composer出现错误提示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">dyld: Library not loaded: /usr/local/opt/jpeg/lib/libjpeg.8.dylib</div><div class="line">  Referenced from: /usr/local/bin/php</div><div class="line">  Reason: image not found</div><div class="line">Abort trap: 6</div></pre></td></tr></table></figure><h3 id="起因："><a href="#起因：" class="headerlink" title="起因："></a>起因：</h3><p>反正肯定文件不存在是找不到<br>我是通过brew升级了下jped 8d-&gt;9d<br>然后brew cleanup 把老的清理掉了，于是8d的文件都找不到</p><h3 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h3><h4 id="下载jpeg8d源码"><a href="#下载jpeg8d源码" class="headerlink" title="下载jpeg8d源码"></a>下载jpeg8d源码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget -c http://www.ijg.org/files/jpegsrc.v8d.tar.gz</div></pre></td></tr></table></figure><h4 id="解压并编译源码"><a href="#解压并编译源码" class="headerlink" title="解压并编译源码"></a>解压并编译源码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">tar xzf jpegsrc.v8d.tar.gz</div><div class="line">cd jpeg-8d</div><div class="line">./configure</div><div class="line">make</div></pre></td></tr></table></figure><h4 id="复制文件"><a href="#复制文件" class="headerlink" title="复制文件"></a>复制文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cp ./.libs/libjpeg.8.dylib /usr/local/opt/jpeg/lib</div></pre></td></tr></table></figure><p>问题解决，哦耶</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;错误提示：&quot;&gt;&lt;a href=&quot;#错误提示：&quot; class=&quot;headerlink&quot; title=&quot;错误提示：&quot;&gt;&lt;/a&gt;错误提示：&lt;/h3&gt;&lt;p&gt;运行php指令及其有依赖的指令，例如composer出现错误提示：&lt;/p&gt;
&lt;figure class=&quot;highl
      
    
    </summary>
    
      <category term="php" scheme="http://blog.netbiu.com/categories/php/"/>
    
    
      <category term="mac" scheme="http://blog.netbiu.com/tags/mac/"/>
    
      <category term="php" scheme="http://blog.netbiu.com/tags/php/"/>
    
      <category term="jpeg" scheme="http://blog.netbiu.com/tags/jpeg/"/>
    
  </entry>
  
  <entry>
    <title>composer运行时提示xdebug问题</title>
    <link href="http://blog.netbiu.com/20171130/xdebug-impact-on-composer/"/>
    <id>http://blog.netbiu.com/20171130/xdebug-impact-on-composer/</id>
    <published>2017-11-29T17:13:47.000Z</published>
    <updated>2017-11-29T18:01:04.654Z</updated>
    
    <content type="html"><![CDATA[<h3 id="警告提示："><a href="#警告提示：" class="headerlink" title="警告提示："></a>警告提示：</h3><p>对于安装了xdebug的朋友在使用composer的时候，会有个关于xdebug的waring提示。<br>主要是xdebug会拖慢composer的速度。而且有waring很难看！</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><h4 id="定位php-ini路径"><a href="#定位php-ini路径" class="headerlink" title="定位php.ini路径"></a>定位php.ini路径</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">php -i | grep &quot;php.ini&quot;</div></pre></td></tr></table></figure><p>一般默认路径为/usr/local/etc/php/{PHP版本号}/php.ini</p><h4 id="进入目录"><a href="#进入目录" class="headerlink" title="进入目录"></a>进入目录</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd /usr/local/etc/php/&#123;PHP版本号&#125;</div></pre></td></tr></table></figure><h4 id="复制php-ini"><a href="#复制php-ini" class="headerlink" title="复制php.ini"></a>复制php.ini</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cp php.ini php-composer.ini</div></pre></td></tr></table></figure><h4 id="删除php-composer-ini中xdebug模块"><a href="#删除php-composer-ini中xdebug模块" class="headerlink" title="删除php-composer.ini中xdebug模块"></a>删除php-composer.ini中xdebug模块</h4><p>如果php-composer.ini中有zend_extension=”{你的xdebug路径}/xdebug.so”<br>在这前加;号注释掉此语句</p><p>或者</p><p>是否在cond.f目录下有ext-xdebug.ini<br>将ext-xdebug.ini中的zend_extension=”{你的xdebug路径}/xdebug.so”复制到php.ini中<br>然后删除ext-xdebug.ini</p><p>主要目的就是php-composer.ini不要加载xdebug模块就好</p><h4 id="查看composer路径"><a href="#查看composer路径" class="headerlink" title="查看composer路径"></a>查看composer路径</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">which composer</div></pre></td></tr></table></figure><h4 id="添加alias"><a href="#添加alias" class="headerlink" title="添加alias"></a>添加alias</h4><p>在~/.bash_profile 或者 ~/.bashrc 或者 ~/.zshrc 中添加alias<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">alias composer=&quot;php -c php-composer.ini &#123;composer路径&#125;&quot;</div><div class="line">/*例如我的*/</div><div class="line">alias composer=&quot;php -c php-composer.ini /usr/local/bin/composer&quot;</div></pre></td></tr></table></figure></p><p>保存后记得source下使得zshrc之类的生效<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">source ~/.zshrc</div></pre></td></tr></table></figure></p><h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">composer -V</div></pre></td></tr></table></figure><p>应该不会出现提示了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;警告提示：&quot;&gt;&lt;a href=&quot;#警告提示：&quot; class=&quot;headerlink&quot; title=&quot;警告提示：&quot;&gt;&lt;/a&gt;警告提示：&lt;/h3&gt;&lt;p&gt;对于安装了xdebug的朋友在使用composer的时候，会有个关于xdebug的waring提示。&lt;br&gt;主要是x
      
    
    </summary>
    
      <category term="composer" scheme="http://blog.netbiu.com/categories/composer/"/>
    
    
      <category term="php" scheme="http://blog.netbiu.com/tags/php/"/>
    
      <category term="xdebug" scheme="http://blog.netbiu.com/tags/xdebug/"/>
    
      <category term="composer" scheme="http://blog.netbiu.com/tags/composer/"/>
    
  </entry>
  
  <entry>
    <title>laravel建数据库表时出现1071错误</title>
    <link href="http://blog.netbiu.com/20170406/laravel-migration-1071-error/"/>
    <id>http://blog.netbiu.com/20170406/laravel-migration-1071-error/</id>
    <published>2017-04-06T07:44:28.000Z</published>
    <updated>2017-11-29T18:00:37.770Z</updated>
    
    <content type="html"><![CDATA[<h3 id="错误提示："><a href="#错误提示：" class="headerlink" title="错误提示："></a>错误提示：</h3><p>php artisan migrate创建表时提示如下错误</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[Illuminate\Database\QueryException] SQLSTATE[42000]: Syntax error or access violation: 1071 Specified key was too long; max key length is 767 bytes (SQL: alter tabl e users add unique users_email_unique(email))</div><div class="line"></div><div class="line">[PDOException] SQLSTATE[42000]: Syntax error or access violation: 1071 Specified key was too long; max key length is 767 bytes</div></pre></td></tr></table></figure><h3 id="运行环境："><a href="#运行环境：" class="headerlink" title="运行环境："></a>运行环境：</h3><p>Laravel = 5.4</p><p>PHP = 7.0</p><p>MariaDB = 10. 1.21</p><h3 id="原因："><a href="#原因：" class="headerlink" title="原因："></a>原因：</h3><p>Laravel 使用 utf8mb4 作为默认编码，原有是想数据库支持emoji表情，但是默认编码是4个字节，数据库支持最大767个bytes，所以最大长度767/4=191，string类型字段默认长度255超过了191。</p><h3 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h3><h4 id="1-基础方法"><a href="#1-基础方法" class="headerlink" title="1.基础方法"></a>1.基础方法</h4><p>修改/app/Providers/AppServiceProvider.php</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">use Illuminate\Support\Facades\Schema; //Import Schema</div><div class="line"></div><div class="line">function boot()</div><div class="line">&#123;</div><div class="line">    Schema::defaultStringLength(191); //Solved by increasing StringLength</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>修改了默认长度。</p><h4 id="2-更优方法"><a href="#2-更优方法" class="headerlink" title="2.更优方法"></a>2.更优方法</h4><p>了解并修改数据库的innodb_large_prefix选项。</p><h3 id="3-最好办法"><a href="#3-最好办法" class="headerlink" title="3.最好办法"></a>3.最好办法</h3><p>Mysql升级到5.7.7以及更新版本。</p><p>MariaDB升级到10.2.2以及更新版本。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;错误提示：&quot;&gt;&lt;a href=&quot;#错误提示：&quot; class=&quot;headerlink&quot; title=&quot;错误提示：&quot;&gt;&lt;/a&gt;错误提示：&lt;/h3&gt;&lt;p&gt;php artisan migrate创建表时提示如下错误&lt;/p&gt;
&lt;figure class=&quot;highlight
      
    
    </summary>
    
      <category term="laravel" scheme="http://blog.netbiu.com/categories/laravel/"/>
    
    
      <category term="laravel" scheme="http://blog.netbiu.com/tags/laravel/"/>
    
      <category term="database" scheme="http://blog.netbiu.com/tags/database/"/>
    
  </entry>
  
  <entry>
    <title>GitLab误删库引发的小思考</title>
    <link href="http://blog.netbiu.com/20170203/Data-Loss-at-GitLab/"/>
    <id>http://blog.netbiu.com/20170203/Data-Loss-at-GitLab/</id>
    <published>2017-02-03T07:43:44.000Z</published>
    <updated>2017-02-04T01:58:34.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情概要"><a href="#前情概要" class="headerlink" title="前情概要"></a>前情概要</h2><h3 id="GitLab公司简介"><a href="#GitLab公司简介" class="headerlink" title="GitLab公司简介"></a>GitLab公司简介</h3><p>尽管GitHub的成功毋庸置疑，但是它还不够完美。</p><p>于是2011年，来自荷兰的程序员Dmitriy Zaporozhets开发了另一个代码管理工具——“GitLab”，起初这个工具只是他自己用来解决现有工具处理不了的问题。之后考虑到别人可能也有类似的问题，Zaporozhets便把GitLab的源代码免费发布到网上。</p><p>2013年，GitLab建立起了自己的免费软件交流社区，之后Zaporozhets与现任首席执行官Sytse “Sid” Sijbrandij一起把GitLab发展成为正式的公司。</p><p>时至今日，GitLab已经成为不少财富500强企业的首选代码存储库。加强的安全性和管理控制与迎合IT部门的软件环境为GitLab赢得了大批企业粉丝。</p><p>(via：网络)</p><h3 id="GitLab项目简介"><a href="#GitLab项目简介" class="headerlink" title="GitLab项目简介"></a>GitLab项目简介</h3><p>GitLab是一个利用 <a href="http://www.oschina.net/p/ruby+on+rails" target="_blank" rel="external">Ruby on Rails</a> 开发的开源应用程序，实现一个自托管的<a href="http://www.oschina.net/p/git" target="_blank" rel="external">Git</a>项目仓库，可通过Web界面进行访问公开的或者私人项目。</p><p>它拥有与<a href="http://www.oschina.net/p/github" target="_blank" rel="external">Github</a>类似的功能，能够浏览源代码，管理缺陷和注释。可以管理团队对仓库的访问，它非常易于浏览提交过的版本并提供一个文件历史库。它还提供一个代码片段收集功能可以轻松实现代码复用，便于日后有需要的时候进行查找。</p><p>(via：<a href="https://www.oschina.net/p/gitlab" target="_blank" rel="external">开源中国</a>)</p><h3 id="事件经过"><a href="#事件经过" class="headerlink" title="事件经过"></a>事件经过</h3><p>一个叫做YP的小可爱在给公司线上db做负载均衡，做着做着碰到了DDoS攻击，等攻击完了发生了可怕的事，db2有差不多4G的数据没同步上生产库(以下称生产库为db1)，YP小可爱锤了10遍胸口也没使db2同步上那4个G的数据，于是他想到了一种横竖横的方法，删了db2的数据，重新从db1同步（类似修电脑常用的重装系统的方法，我常用😂）。</p><p>于是搞得快要昏古起的YP同学敲下了【rm -rf】命令，只不过他敲在了db1上，并完美的按下了回车去喝咖啡了。</p><p>等到发现并按下Ctrl+C的时候，300G数据已经删除的所剩无几了（还剩4.5G）。</p><p>那怎么办的，公司有五种备份机制，恢复就好了吧？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">数据库的同步，没有同步Webhook</div><div class="line">硬盘快照，没做数据库的快照</div><div class="line">pg_dump的备份，用9.2的版本去dump 9.6的数据，导致没有dump出数据</div><div class="line">S3的备份，完全没有备份上</div><div class="line">人肉备份，可能是因为懒。。。</div></pre></td></tr></table></figure><p>(<a href="https://worktile.com/club/tutorial/d5003cd3d8ae4033a75cc285fee60d04" target="_blank" rel="external">Webhook科普</a>)</p><p>最后他们发现有个6个小时前的备份，勉强用吧。。。</p><h3 id="丢失的数据"><a href="#丢失的数据" class="headerlink" title="丢失的数据"></a>丢失的数据</h3><ul><li>粗略估计，有4613 的项目， 74 forks,  和 350 imports 丢失了；但是，因为Git仓库还在，所以，可以从Git仓库反向推导数据库中的数据，但是，项目中的issues等就完全丢失了。</li><li>大约有±4979 提交记录丢失了（陈皓注：估计也可以用git仓库中反向恢复）。</li><li>可能有 707  用户丢失了，这个数据来自Kibana的日志。</li><li>在1月31日17:20 后的Webhooks 丢失了。</li></ul><p>（via：<a href="http://coolshell.cn/articles/17680.html" target="_blank" rel="external">酷壳</a>）</p><h3 id="值得赞扬的地方"><a href="#值得赞扬的地方" class="headerlink" title="值得赞扬的地方"></a>值得赞扬的地方</h3><p>事件发生后公开处理：</p><ol><li>整个事件经过，第一时间放在了 <a href="https://docs.google.com/document/d/1GCK53YDcBWQveod9kfzW-VCxIABGiryG7_z_6jHdVik/pub" target="_blank" rel="external">Google Docs</a> 上</li><li><a href="https://twitter.com/gitlab" target="_blank" rel="external">Twitter</a> 同步更新恢复进度</li><li>YouTube 直播恢复过程，直播聊天很欢快（我在B站看的搬运）</li></ol><p>透明处理获得了许多外部的帮助</p><p>公司决定不会开除YP小可爱 （但惩罚是听10个小时的Nyan Cat，祝安好😊）</p><p>想办法通过日志等恢复丢失的6个小时内的数据</p><h2 id="一些个人想法及反思"><a href="#一些个人想法及反思" class="headerlink" title="一些个人想法及反思"></a>一些个人想法及反思</h2><p>【从删库到跑路教程】最近发生的很多，比如前不久网易就发生了，导致《炉石传说》游戏回档到前一天，这些都让大伙不得不开始重视此类事件。（听说阿里内部也经常发生🤔）</p><h3 id="为何会发生"><a href="#为何会发生" class="headerlink" title="为何会发生"></a>为何会发生</h3><p>会发现，这样的事件都是人为不慎的误操作导致的。</p><h3 id="如何避免"><a href="#如何避免" class="headerlink" title="如何避免"></a>如何避免</h3><h4 id="他人的建议："><a href="#他人的建议：" class="headerlink" title="他人的建议："></a>他人的建议：</h4><ol><li>一个人操作，另一个人在旁看，有问题提醒</li></ol><p>增加了人力成本，时间成本，效率成本，并且依旧会出事，两个人也会因为疲惫等问题出错。</p><ol><li>使用mv代替rm</li></ol><p>规范需要有学习成本，并且依旧是人在实施，可能在某些情况依旧会使用rm导致出错。</p><ol><li>增加权限</li></ol><p>有权限的人依旧会出事啊，现在出错的人不都是有权限的人吗？</p><ol><li>系统中碰到rm这种命令增加二次确认</li></ol><p>二次确认也挡不住我不听使唤的双手啊！！！</p><h4 id="个人意见"><a href="#个人意见" class="headerlink" title="个人意见"></a>个人意见</h4><ol><li>依旧做好备份工作</li><li>做好相关的文档工作</li><li>定期检查备份是否正常</li><li>经常live下，实践下看灾备系统是否能正常</li><li>备份要多节点，多种方式，防止各种问题</li><li>既然人工误操作问题不能完美解决，就让灾备系统完美运行吧</li></ol><h4 id="Ask-5-Whys"><a href="#Ask-5-Whys" class="headerlink" title="Ask 5 Whys"></a>Ask 5 Whys</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">你需要找到正确的团队来完成这个故障反思。</div><div class="line">使用纸或白板而不是电脑。</div><div class="line">写下整个问题的过程，确保每个人都能看懂。</div><div class="line">区别原因和症状。</div><div class="line">特别注意因果关系。</div><div class="line">说明Root Cause以及相关的证据。</div><div class="line">5个为什么的答案需要是精确的。</div><div class="line">寻找问题根源的步骤，而不是直接跳到结论。</div><div class="line">要基础客观的事实、数据和知识。</div><div class="line">评估过程而不是人。</div><div class="line">千万不要把“人为失误”或是“工作不注意”当成问题的根源。</div><div class="line">培养信任和真诚的气氛和文化。</div><div class="line">不断的问“为什么”直到问题的根源被找到。这样可以保证同一个坑不会掉进去两次。</div><div class="line">当你给出“为什么”的答案时，你应该从用户的角度来回答。</div></pre></td></tr></table></figure><p>（via：<a href="https://en.wikipedia.org/wiki/5_Whys" target="_blank" rel="external">Wikipedia</a>）</p><h3 id="趣闻"><a href="#趣闻" class="headerlink" title="趣闻"></a>趣闻</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ww3.sinaimg.cn/large/006tNbRwgy1fcdnv2yfdfj30x00can06.jpg" alt="微软核毁灭恢复演练" title="">                </div>                <div class="image-caption">微软核毁灭恢复演练</div>            </figure><p>佩服这种核弹毁灭了，第二天依旧勤奋工作的小可爱。</p><p>今天立春了，祝大家春暖花开！</p><p>最后送大家一本书，以便及时应对不时之需：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ww2.sinaimg.cn/large/006tNbRwgy1fcdnw1ctytj30go0h43zl.jpg" alt="mysql从删库到跑路" title="">                </div>                <div class="image-caption">mysql从删库到跑路</div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前情概要&quot;&gt;&lt;a href=&quot;#前情概要&quot; class=&quot;headerlink&quot; title=&quot;前情概要&quot;&gt;&lt;/a&gt;前情概要&lt;/h2&gt;&lt;h3 id=&quot;GitLab公司简介&quot;&gt;&lt;a href=&quot;#GitLab公司简介&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="感想" scheme="http://blog.netbiu.com/categories/%E6%84%9F%E6%83%B3/"/>
    
    
      <category term="Gitlab" scheme="http://blog.netbiu.com/tags/Gitlab/"/>
    
      <category term="备份" scheme="http://blog.netbiu.com/tags/%E5%A4%87%E4%BB%BD/"/>
    
  </entry>
  
</feed>
